name: Auto PR for release branches

on:
  push:
    branches:
      - "release/**"
    paths:
      - "argocd/applications/*/kustomization.yaml"
  workflow_dispatch:
    inputs:
      head_branch:
        description: "Branch to create the PR from (for manual runs, provide value like release/<sha256>)"
        required: false

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: auto-pr-release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  create-pr:
    permissions:
      contents: write
      pull-requests: write
    # Run automatically for image-updater commits or manually via workflow_dispatch
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && contains(github.event.head_commit.message, 'automatic update'))
    runs-on: ubuntu-latest
    steps:
      - name: Determine release branch context
        id: release_branch
        env:
          HEAD_BRANCH_INPUT: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.head_branch || '' }}
        run: |
          set -euo pipefail
          if [ -n "${HEAD_BRANCH_INPUT}" ]; then
            HEAD_BRANCH="${HEAD_BRANCH_INPUT}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Head branch must be provided when running manually"
            exit 1
          else
            HEAD_BRANCH="${GITHUB_REF_NAME}"
          fi
          if [[ "${HEAD_BRANCH}" =~ ^release/([0-9a-f]{64})$ ]]; then
            sha="${BASH_REMATCH[1]}"
            short_name="release/${sha:0:7}"
          else
            short_name="${HEAD_BRANCH}"
          fi
          echo "head_branch=${HEAD_BRANCH}" >> "${GITHUB_OUTPUT}"
          echo "short_name=${short_name}" >> "${GITHUB_OUTPUT}"

      - name: Ensure GitHub CLI is available
        run: gh --version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}

      - name: Create PR if not exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          HEAD_BRANCH: ${{ steps.release_branch.outputs.head_branch }}
          SHORT_NAME: ${{ steps.release_branch.outputs.short_name }}
        run: |
          set -euo pipefail
          BASE_BRANCH="main"

          existing_pr_number=$(gh pr list \
            -R "$GH_REPO" \
            --head "$HEAD_BRANCH" \
            --base "$BASE_BRANCH" \
            --state open \
            --json number \
            --jq '.[0].number // empty' || true)

          if [ -n "${existing_pr_number:-}" ]; then
            echo "Open PR already exists: #$existing_pr_number"
            exit 0
          fi

          # Derive a concise title from the branch name
          pr_title="chore(${SHORT_NAME}): automated release PR"
          pr_body="Automated PR created on push to ${HEAD_BRANCH}. Contains Argo CD Image Updater changes for ${SHORT_NAME}."

          response_file=$(mktemp)
          err_file=$(mktemp)
          if gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            "/repos/${GH_REPO}/pulls" \
            -f base="$BASE_BRANCH" \
            -f head="$HEAD_BRANCH" \
            -f title="$pr_title" \
            -f body="$pr_body" \
            --jq '.number' > "$response_file" 2>"$err_file"; then
            new_pr_number=$(cat "$response_file")
            echo "Created PR #$new_pr_number"
          else
            status=$?
            err_output=$(cat "$err_file")
            if echo "$err_output" | grep -qi 'already exists'; then
              echo "A PR already exists for $HEAD_BRANCH but was not detected as open."
              exit 0
            fi
            echo "$err_output"
            exit $status
          fi
          rm -f "$response_file" "$err_file"
