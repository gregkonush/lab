apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: platform
  namespace: argocd
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  generators:
    - list:
        elements:
          - name: cloudnative-pg
            path: argocd/applications/cloudnative-pg
            namespace: cloudnative-pg
            annotations:
              argocd.argoproj.io/sync-wave: "-1"
            automation: auto
            enabled: "true"
          - name: redis-operator
            path: argocd/applications/redis-operator
            namespace: redis-operator
            annotations:
              argocd.argoproj.io/sync-wave: "-1"
            automation: auto
            enabled: "true"
          - name: external-dns
            path: argocd/applications/external-dns
            namespace: external-dns
            annotations:
              argocd.argoproj.io/sync-wave: "0"
            automation: auto
            enabled: "false"
          - name: cloudflare
            path: argocd/applications/cloudflare
            namespace: cloudflare
            annotations:
              argocd.argoproj.io/sync-wave: "0"
            automation: auto
            enabled: "false"
          - name: istio-system
            path: argocd/applications/istio-system
            namespace: istio-system
            annotations:
              argocd.argoproj.io/sync-wave: "0"
            automation: auto
            enabled: "true"
          - name: istio-ingress
            path: argocd/applications/istio-ingress
            namespace: istio-ingress
            annotations:
              argocd.argoproj.io/sync-wave: "1"
            automation: auto
            enabled: "true"
          - name: knative
            path: argocd/applications/knative
            namespace: knative
            annotations:
              argocd.argoproj.io/sync-wave: "1"
            automation: auto
            enabled: "true"
          - name: knative-serving
            path: argocd/applications/knative-serving
            namespace: knative-serving
            annotations:
              argocd.argoproj.io/sync-wave: "2"
            automation: auto
            enabled: "true"
          - name: knative-eventing
            path: argocd/applications/knative-eventing
            namespace: knative-eventing
            annotations:
              argocd.argoproj.io/sync-wave: "2"
            automation: auto
            enabled: "true"
          - name: fission
            path: argocd/applications/fission
            namespace: fission
            annotations:
              argocd.argoproj.io/sync-wave: "2"
            automation: auto
            enabled: "false"
          - name: kafka
            path: argocd/applications/kafka
            namespace: kafka
            annotations:
              argocd.argoproj.io/sync-wave: "2"
            kustomizeBuildOptions: "--load-restrictor LoadRestrictionsNone"
            automation: auto
            enabled: "true"
          - name: argo-workflows
            path: argocd/applications/argo-workflows
            namespace: argo-workflows
            annotations:
              argocd.argoproj.io/sync-wave: "3"
            automation: manual
            enabled: "true"
          - name: lgtm
            path: argocd/applications/lgtm
            namespace: lgtm
            annotations:
              argocd.argoproj.io/sync-wave: "3"
            automation: auto
            enabled: "true"
          - name: minio
            path: argocd/applications/minio
            namespace: minio
            annotations:
              argocd.argoproj.io/sync-wave: "3"
            automation: auto
            enabled: "false"
          - name: milvus
            path: argocd/applications/milvus
            namespace: milvus
            annotations:
              argocd.argoproj.io/sync-wave: "4"
            automation: auto
            enabled: "false"
          - name: tigresse
            path: argocd/applications/tigresse
            namespace: tigresse-system
            annotations:
              argocd.argoproj.io/sync-wave: "3"
            automation: auto
            enabled: "false"
          - name: temporal
            path: argocd/applications/temporal
            namespace: temporal
            annotations:
              argocd.argoproj.io/sync-wave: "4"
            automation: auto
            enabled: "false"
          - name: airbyte
            path: argocd/applications/airbyte
            namespace: airbyte
            annotations:
              argocd.argoproj.io/sync-wave: "4"
            automation: auto
            enabled: "false"
          - name: dagster
            path: argocd/applications/dagster
            namespace: dagster
            annotations:
              argocd.argoproj.io/sync-wave: "4"
            automation: auto
            enabled: "false"
          - name: verdaccio
            path: argocd/applications/verdaccio
            namespace: verdaccio
            annotations:
              argocd.argoproj.io/sync-wave: "3"
            automation: auto
            enabled: "false"
          - name: spark
            path: argocd/applications/spark
            namespace: spark
            annotations:
              argocd.argoproj.io/sync-wave: "3"
            automation: auto
            enabled: "false"
          - name: coder
            path: argocd/applications/coder
            namespace: coder
            annotations:
              argocd.argoproj.io/sync-wave: "3"
            automation: auto
            enabled: "true"
          - name: arc
            path: argocd/applications/arc
            namespace: arc
            annotations:
              argocd.argoproj.io/sync-wave: "4"
            automation: auto
            enabled: "true"
          - name: backstage
            path: argocd/applications/backstage
            namespace: backstage
            annotations:
              argocd.argoproj.io/sync-wave: "4"
            automation: auto
            enabled: "false"
          - name: convex
            path: argocd/applications/convex
            namespace: convex
            annotations:
              argocd.argoproj.io/sync-wave: "4"
            automation: auto
            enabled: "false"
      selector:
        matchExpressions:
          - key: enabled
            operator: NotIn
            values: ["false", "False", "0"]
  template:
    metadata:
      name: "{{ .name }}"
    spec:
      project: '{{ if hasKey . "project" }}{{ .project }}{{ else }}default{{ end }}'
      destination:
        server: https://kubernetes.default.svc
        namespace: '{{ if hasKey . "namespace" }}{{ .namespace }}{{ else }}{{ .name }}{{ end }}'
      source:
        repoURL: https://github.com/gregkonush/lab.git
        targetRevision: main
        path: "{{ .path }}"
      syncPolicy:
        syncOptions:
          - CreateNamespace=true
          - ServerSideApply=true
          - RespectIgnoreDifferences=true
      ignoreDifferences:
        - kind: StatefulSet
          group: apps
          namespace: dagster
          jqPathExpressions:
            - .spec.volumeClaimTemplates
        - kind: StatefulSet
          group: apps
          namespace: lgtm
          jqPathExpressions:
            - .spec.volumeClaimTemplates[].apiVersion
            - .spec.volumeClaimTemplates[].kind
            - .spec.volumeClaimTemplates[].spec.volumeMode
            - .spec.volumeClaimTemplates[].status
            - .spec.persistentVolumeClaimRetentionPolicy
            - .spec.podManagementPolicy
            - .spec.updateStrategy.type
            - .spec.updateStrategy.rollingUpdate.partition
            - .spec.template.spec.serviceAccount
            - .spec.template.spec.dnsPolicy
            - .spec.template.spec.restartPolicy
            - .spec.template.spec.schedulerName
            - .spec.template.spec.volumes[].configMap.defaultMode
            - .spec.template.spec.containers[].livenessProbe.failureThreshold
            - .spec.template.spec.containers[].livenessProbe.httpGet.scheme
            - .spec.template.spec.containers[].livenessProbe.periodSeconds
            - .spec.template.spec.containers[].livenessProbe.successThreshold
            - .spec.template.spec.containers[].livenessProbe.timeoutSeconds
            - .spec.template.spec.containers[].readinessProbe.failureThreshold
            - .spec.template.spec.containers[].readinessProbe.httpGet.scheme
            - .spec.template.spec.containers[].readinessProbe.periodSeconds
            - .spec.template.spec.containers[].readinessProbe.successThreshold
            - .spec.template.spec.containers[].readinessProbe.timeoutSeconds
        - kind: Deployment
          group: apps
          namespace: istio-system
          name: istiod
          jqPathExpressions:
            - .spec.template.spec.containers[].env[].valueFrom.resourceFieldRef.divisor
        - kind: DaemonSet
          group: apps
          namespace: istio-system
          name: istio-cni-node
          jqPathExpressions:
            - .spec.template.spec.containers[].env[].valueFrom.resourceFieldRef.divisor
        - kind: ValidatingWebhookConfiguration
          group: admissionregistration.k8s.io
          name: istio-validator-istio-system
          jqPathExpressions:
            - .webhooks[].failurePolicy
        - kind: ValidatingWebhookConfiguration
          group: admissionregistration.k8s.io
          name: istiod-default-validator
          jqPathExpressions:
            - .webhooks[].failurePolicy
        - kind: ClusterRole
          group: rbac.authorization.k8s.io
          name: knative-eventing-operator-aggregated-stable
          jqPathExpressions:
            - .rules
        - kind: ClusterRole
          group: rbac.authorization.k8s.io
          name: knative-serving-operator-aggregated-stable
          jqPathExpressions:
            - .rules
  templatePatch: |
    {{- if .annotations }}
    metadata:
      annotations:
    {{- range $key, $value := .annotations }}
        {{ $key }}: {{ $value | quote }}
    {{- end }}
    {{- end }}
    {{- if hasKey . "kustomizeBuildOptions" }}
    spec:
      source:
        kustomize:
          buildOptions: {{ .kustomizeBuildOptions | quote }}
    {{- end }}
    {{- $useLovely := or (not (hasKey . "renderWithLovely")) .renderWithLovely -}}
    {{- if or $useLovely (eq .automation "auto") }}
    spec:
      {{- if $useLovely }}
      source:
        plugin:
          name: lovely
      {{- end }}
      {{- if eq .automation "auto" }}
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
      {{- end }}
    {{- end }}
