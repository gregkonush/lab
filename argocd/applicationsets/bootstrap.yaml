apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: bootstrap
  namespace: argocd
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  generators:
    - list:
        elements:
          - name: argocd
            path: argocd/applications/argocd
            namespace: argocd
            annotations:
              argocd.argoproj.io/sync-wave: "-2"
            automation: auto
            enabled: true
          - name: sealed-secrets
            path: argocd/applications/sealed-secrets
            namespace: sealed-secrets
            annotations:
              argocd.argoproj.io/sync-wave: "-2"
            automation: auto
            enabled: true
          - name: cert-manager
            path: argocd/applications/cert-manager
            namespace: cert-manager
            annotations:
              argocd.argoproj.io/sync-wave: "-1"
            automation: auto
            enabled: true
          - name: longhorn
            path: argocd/applications/longhorn
            namespace: longhorn-system
            annotations:
              argocd.argoproj.io/sync-wave: "-1"
            automation: auto
            enabled: true
          - name: metallb-system
            path: argocd/applications/metallb-system
            namespace: metallb-system
            annotations:
              argocd.argoproj.io/sync-wave: "0"
            automation: auto
            enabled: true
          - name: tailscale
            path: argocd/applications/tailscale
            namespace: tailscale
            annotations:
              argocd.argoproj.io/sync-wave: "0"
            automation: auto
            enabled: true
          - name: registry
            path: argocd/applications/registry
            namespace: registry
            annotations:
              argocd.argoproj.io/sync-wave: "1"
            automation: auto
            enabled: true
      selector:
        matchExpressions:
          - key: enabled
            operator: NotIn
            values: ["false", "False", "0"]
  template:
    metadata:
      name: '{{ .name }}'
    spec:
      project: '{{ if hasKey . "project" }}{{ .project }}{{ else }}default{{ end }}'
      destination:
        server: https://kubernetes.default.svc
        namespace: '{{ if hasKey . "namespace" }}{{ .namespace }}{{ else }}{{ .name }}{{ end }}'
      source:
        repoURL: https://github.com/gregkonush/lab.git
        targetRevision: main
        path: '{{ .path }}'
      syncPolicy:
        syncOptions:
          - CreateNamespace=true
          - ServerSideApply=true
  templatePatch: |
    {{- if .annotations }}
    metadata:
      annotations:
    {{- range $key, $value := .annotations }}
        {{ $key }}: {{ $value | quote }}
    {{- end }}
    {{- end }}
    {{- $useLovely := or (not (hasKey . "renderWithLovely")) .renderWithLovely -}}
    {{- if or $useLovely (eq .automation "auto") }}
    spec:
      {{- if $useLovely }}
      source:
        plugin:
          name: lovely
      {{- end }}
      {{- if eq .automation "auto" }}
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
      {{- end }}
    {{- end }}
