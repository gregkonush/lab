apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: arc-controller
  namespace: argocd
spec:
  project: default
  sources:
    - repoURL: ghcr.io
      chart: actions/actions-runner-controller-charts/gha-runner-scale-set-controller
      targetRevision: 0.12.1
      helm:
        releaseName: arc-controller
        skipCrds: false
    - repoURL: ghcr.io
      chart: actions/actions-runner-controller-charts/gha-runner-scale-set
      targetRevision: 0.12.1
      helm:
        releaseName: arc-runner-set
        skipCrds: false
        valuesObject:
          controllerServiceAccount:
            name: arc-controller-gha-rs-controller
            namespace: arc
          githubConfigUrl: https://github.com/gregkonush/lab
          githubConfigSecret: github-token
          runnerScaleSetName: arc-arm64
          minRunners: 3
          maxRunners: 9
          containerMode:
            type: "kubernetes"
            kubernetesModeWorkVolumeClaim:
              accessModes: ["ReadWriteOnce"]
              storageClassName: "local-path"
              resources:
                requests:
                  storage: 1Gi
          template:
            spec:
              securityContext:
                runAsNonRoot: false
              initContainers:
                - name: init-dind-externals
                  image: ghcr.io/actions/actions-runner:latest
                  command: ["cp", "-r", "-v", "/home/runner/externals/.", "/home/runner/tmpDir/"]
                  resources:
                    requests:
                      cpu: "100m"
                      memory: "128Mi"
                    limits:
                      cpu: "200m"
                      memory: "256Mi"
              containers:
                - name: tailscale
                  image: ghcr.io/tailscale/tailscale:stable
                  env:
                    - name: TS_AUTHKEY
                      valueFrom:
                        secretKeyRef:
                          name: tailscale-auth
                          key: TS_AUTHKEY
                    - name: TS_HOSTNAME_PREFIX
                      value: arc-runner
                  securityContext:
                    privileged: true
                    capabilities:
                      add: ["NET_ADMIN", "NET_RAW"]
                  volumeMounts:
                    - name: tailscale-run
                      mountPath: /var/run/tailscale
                    - name: dev-net-tun
                      mountPath: /dev/net/tun
                  command:
                    - /bin/sh
                    - -c
                  args:
                    - |
                      set -euo pipefail 2>/dev/null || set -euo
                      mkdir -p /var/run/tailscale
                      tailscaled --state=mem: --socket=/var/run/tailscale/tailscaled.sock &
                      for i in $(seq 1 30); do
                        tailscale --socket=/var/run/tailscale/tailscaled.sock status >/dev/null 2>&1 && break
                        sleep 1
                      done
                      tailscale --socket=/var/run/tailscale/tailscaled.sock up \
                        --auth-key="${TS_AUTHKEY}?ephemeral=true" \
                        --hostname="${TS_HOSTNAME_PREFIX}-${HOSTNAME}" \
                        --accept-dns=true \
                        --accept-routes=true \
                        --reset
                      trap 'tailscale --socket=/var/run/tailscale/tailscaled.sock logout' EXIT
                      wait
                - name: runner
                  image: ghcr.io/actions/actions-runner:latest
                  command: ["/home/runner/run.sh"]
                  resources:
                    requests:
                      cpu: "500m"
                      memory: "2Gi"
                    limits:
                      cpu: "2000m"
                      memory: "4Gi"
                  env:
                    - name: ACTIONS_RUNNER_CONTAINER_HOOKS
                      value: /home/runner/k8s/index.js
                    - name: ACTIONS_RUNNER_POD_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.name
                    - name: DOCKER_HOST
                      value: unix:///var/run/docker.sock
                    - name: ACTIONS_RUNNER_REQUIRE_JOB_CONTAINER
                      value: "false"
                  volumeMounts:
                    - name: work
                      mountPath: /home/runner/_work
                    - name: dind-sock
                      mountPath: /var/run
                - name: dind
                  image: docker:dind
                  args:
                    - dockerd
                    - --host=unix:///var/run/docker.sock
                    - --group=$(DOCKER_GROUP_GID)
                  resources:
                    requests:
                      cpu: "500m"
                      memory: "2Gi"
                    limits:
                      cpu: "2000m"
                      memory: "4Gi"
                  env:
                    - name: DOCKER_GROUP_GID
                      value: "123"
                  securityContext:
                    privileged: true
                  volumeMounts:
                    - name: work
                      mountPath: /home/runner/_work
                    - name: dind-sock
                      mountPath: /var/run
                    - name: dind-externals
                      mountPath: /home/runner/externals
              volumes:
                - name: work
                  ephemeral:
                    volumeClaimTemplate:
                      spec:
                        accessModes: ["ReadWriteOnce"]
                        storageClassName: "local-path"
                        resources:
                          requests:
                            storage: 5Gi
                - name: dind-sock
                  emptyDir: {}
                - name: dind-externals
                  emptyDir: {}
                - name: tailscale-run
                  emptyDir: {}
                - name: dev-net-tun
                  hostPath:
                    path: /dev/net/tun
                    type: CharDevice

  destination:
    server: https://kubernetes.default.svc
    namespace: arc

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - ServerSideApply=true
  ignoreDifferences:
    - group: apiextensions.k8s.io
      kind: CustomResourceDefinition
      jsonPointers:
        - /spec/preserveUnknownFields
