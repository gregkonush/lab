apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-alloy
  namespace: argocd
data:
  config.river: |
    logging {
      level  = "info"
      format = "logfmt"
    }

    discovery.kubernetes "argocd_pods" {
      role = "pod"

      namespaces {
        names = ["argocd"]
      }

      selectors {
        role  = "pod"
        field = "metadata.namespace=argocd"
      }
    }

    discovery.kubernetes "argocd_endpoints" {
      role = "endpoints"

      namespaces {
        names = ["argocd"]
      }

      selectors {
        role  = "endpoints"
        field = "metadata.namespace=argocd"
      }
    }

    discovery.relabel "argocd_metrics" {
      targets = discovery.kubernetes.argocd_endpoints.targets

      rule {
        source_labels = ["__meta_kubernetes_endpoint_port_name"]
        regex         = "(?i)metrics"
        action        = "keep"
      }

      rule {
        source_labels = ["__meta_kubernetes_service_name"]
        target_label  = "service"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label  = "pod"
      }

      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label  = "namespace"
      }
    }

    prometheus.remote_write "mimir" {
      endpoint {
        url = "http://lgtm-mimir-nginx.lgtm.svc.cluster.local/api/v1/push"
      }
    }

    prometheus.scrape "argocd" {
      job_name        = "argocd"
      scrape_interval = "30s"
      targets         = discovery.relabel.argocd_metrics.output
      forward_to      = [prometheus.remote_write.mimir.receiver]
    }

    loki.write "default" {
      endpoint {
        url = "http://lgtm-loki-gateway.lgtm.svc.cluster.local/loki/api/v1/push"
      }
    }

    loki.source.kubernetes "argocd_pod_logs" {
      targets            = discovery.kubernetes.argocd_pods.targets
      drop_deleted_pods  = true
      allow_out_of_order = true
      forward_to         = [loki.process.argocd_pod_logs.receiver]
    }

    loki.process "argocd_pod_logs" {
      stage.labels {
        values = {
          namespace = "{{ .Labels.namespace }}",
          pod       = "{{ .Labels.pod }}",
          container = "{{ .Labels.container }}",
        }
      }

      stage.static_labels {
        values = {
          job = "argocd",
        }
      }

      forward_to = [loki.write.default.receiver]
    }
