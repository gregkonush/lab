apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: github-codex-task
  namespace: argo-workflows
spec:
  entrypoint: dispatch
  arguments:
    parameters:
      - name: stage
      - name: prompt
      - name: repository
      - name: base
      - name: head
      - name: issueNumber
      - name: issueUrl
      - name: issueTitle
      - name: issueBody
      - name: planCommentId
      - name: planCommentUrl
      - name: planCommentBody
  templates:
    - name: dispatch
      inputs:
        parameters:
          - name: stage
          - name: prompt
          - name: repository
          - name: base
          - name: head
          - name: issueNumber
          - name: issueUrl
          - name: issueTitle
          - name: issueBody
          - name: planCommentId
          - name: planCommentUrl
          - name: planCommentBody
      steps:
        - - name: planning
            template: planning
            when: "{{inputs.parameters.stage}} == planning"
            arguments:
              parameters:
                - name: prompt
                  value: "{{inputs.parameters.prompt}}"
                - name: repository
                  value: "{{inputs.parameters.repository}}"
                - name: issueNumber
                  value: "{{inputs.parameters.issueNumber}}"
                - name: issueUrl
                  value: "{{inputs.parameters.issueUrl}}"
                - name: issueTitle
                  value: "{{inputs.parameters.issueTitle}}"
                - name: issueBody
                  value: "{{inputs.parameters.issueBody}}"
        - - name: implementation
            template: implementation
            when: "{{inputs.parameters.stage}} == implementation"
            arguments:
              parameters:
                - name: prompt
                  value: "{{inputs.parameters.prompt}}"
                - name: repository
                  value: "{{inputs.parameters.repository}}"
                - name: base
                  value: "{{inputs.parameters.base}}"
                - name: head
                  value: "{{inputs.parameters.head}}"
                - name: issueNumber
                  value: "{{inputs.parameters.issueNumber}}"
                - name: issueUrl
                  value: "{{inputs.parameters.issueUrl}}"
                - name: issueTitle
                  value: "{{inputs.parameters.issueTitle}}"
                - name: issueBody
                  value: "{{inputs.parameters.issueBody}}"
                - name: planCommentId
                  value: "{{inputs.parameters.planCommentId}}"
                - name: planCommentUrl
                  value: "{{inputs.parameters.planCommentUrl}}"
                - name: planCommentBody
                  value: "{{inputs.parameters.planCommentBody}}"
    - name: planning
      inputs:
        parameters:
          - name: prompt
          - name: repository
          - name: issueNumber
          - name: issueUrl
          - name: issueTitle
          - name: issueBody
      container:
        image: ghcr.io/openai/codex-universal:latest
        command: ["/bin/bash", "-lc"]
        env:
          - name: OPENAI_API_KEY
            valueFrom:
              secretKeyRef:
                name: codex-openai
                key: api-key
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-token
                key: token
        args:
          - |
            set -euo pipefail
            echo "Installing Codex CLI..."
            npm install -g @openai/codex@latest >/tmp/npm.log 2>&1 || { cat /tmp/npm.log >&2; exit 1; }

            cat <<'PROMPT' > /workspace/prompt.txt
            {{inputs.parameters.prompt}}
            PROMPT

            PLAN_OUTPUT=$(mktemp)
            codex --model gpt-5-codex --reasoning high --search --mode yolo --format markdown --yes < /workspace/prompt.txt > "$PLAN_OUTPUT"

            COMMENT_FILE=$(mktemp)
            {
              echo "<!-- codex:plan -->"
              cat "$PLAN_OUTPUT"
              echo
              echo "- [ ] Maintainer review (add 👍 reaction to approve and trigger implementation)"
              echo "- [ ] Update plan if new information emerges"
            } > "$COMMENT_FILE"

            export COMMENT_FILE
            python - <<'PY'
            import json, os, pathlib
            comment = pathlib.Path(os.environ['COMMENT_FILE']).read_text()
            payload_path = pathlib.Path('/tmp/comment.json')
            payload_path.write_text(json.dumps({'body': comment}))
            PY

            curl -sSf -X POST \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/{{inputs.parameters.repository}}/issues/{{inputs.parameters.issueNumber}}/comments" \
              -d @/tmp/comment.json

    - name: implementation
      inputs:
        parameters:
          - name: prompt
          - name: repository
          - name: base
          - name: head
          - name: issueNumber
          - name: issueUrl
          - name: issueTitle
          - name: issueBody
          - name: planCommentId
          - name: planCommentUrl
          - name: planCommentBody
      container:
        image: ghcr.io/openai/codex-universal:latest
        command: ["/bin/bash", "-lc"]
        env:
          - name: OPENAI_API_KEY
            valueFrom:
              secretKeyRef:
                name: codex-openai
                key: api-key
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-token
                key: token
          - name: GIT_TERMINAL_PROMPT
            value: "0"
          - name: HEAD
            value: "{{inputs.parameters.head}}"
          - name: BASE
            value: "{{inputs.parameters.base}}"
          - name: ISSUE_NUMBER
            value: "{{inputs.parameters.issueNumber}}"
          - name: ISSUE_TITLE
            value: "{{inputs.parameters.issueTitle}}"
          - name: PLAN_COMMENT_URL
            value: "{{inputs.parameters.planCommentUrl}}"
        args:
          - |
            set -euo pipefail

            git config --global advice.detachedHead false
            git config --global init.defaultBranch main
            git config --global user.name "codex-automation"
            git config --global user.email "codex-automation@users.noreply.github.com"

            echo "Installing Codex CLI..."
            npm install -g @openai/codex@latest >/tmp/npm.log 2>&1 || { cat /tmp/npm.log >&2; exit 1; }

            WORKDIR=$(mktemp -d)
            git clone "https://x-access-token:${GITHUB_TOKEN}@github.com/{{inputs.parameters.repository}}.git" "$WORKDIR"
            cd "$WORKDIR"
            git checkout "{{inputs.parameters.base}}"
            git checkout -B "{{inputs.parameters.head}}"

            cat <<'PROMPT' > /workspace/prompt.txt
            {{inputs.parameters.prompt}}
            PROMPT
            cat <<'PLAN' > /workspace/plan.txt
            {{inputs.parameters.planCommentBody}}
            PLAN

            codex --model gpt-5-codex --reasoning high --search --mode yolo --format markdown --yes <<'EOCODEX'
            You are operating inside a clean checkout of repository {{inputs.parameters.repository}} on branch {{inputs.parameters.head}}.

            Follow the approved implementation plan below to address GitHub issue #{{inputs.parameters.issueNumber}}:

            {{inputs.parameters.planCommentBody}}

            After implementing:
            - Run relevant formatters, linters, and tests.
            - Stage and commit changes referencing the issue.
            - Do not push or open the PR; the workflow will handle that.
            EOCODEX

            if [[ -z "$(git status --porcelain)" ]]; then
              echo "Codex did not produce any changes."
              exit 0
            fi

            git add -A
            git commit -m "chore: implement plan for issue #{{inputs.parameters.issueNumber}}"
            git push "https://x-access-token:${GITHUB_TOKEN}@github.com/{{inputs.parameters.repository}}.git" "{{inputs.parameters.head}}"

            python - <<'PY'
            import json, os
            payload = {
                "title": f"Draft: {os.environ['ISSUE_TITLE']}",
                "head": os.environ['HEAD'],
                "base": os.environ['BASE'],
                "body": (
                    f"Automated implementation for issue #{os.environ['ISSUE_NUMBER']}\n\n"
                    f"Plan reference: {os.environ.get('PLAN_COMMENT_URL', 'N/A')}\n"
                ),
                "draft": True,
            }
            with open('/tmp/pr.json', 'w') as f:
                json.dump(payload, f)
            PY

            curl -sSf -X POST \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/{{inputs.parameters.repository}}/pulls" \
              -d @/tmp/pr.json

            python - <<'PY'
            import json, os
            payload = {
                "body": (
                    f"Implementation branch '{os.environ['HEAD']}' ready. Draft PR opened against {os.environ['BASE']}."
                )
            }
            with open('/tmp/issue-comment.json', 'w') as f:
                json.dump(payload, f)
            PY

            curl -sSf -X POST \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/{{inputs.parameters.repository}}/issues/{{inputs.parameters.issueNumber}}/comments" \
              -d @/tmp/issue-comment.json
