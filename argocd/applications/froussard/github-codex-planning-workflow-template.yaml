apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: github-codex-planning
  namespace: argo-workflows
  labels:
    codex.stage: planning
spec:
  serviceAccountName: argo-workflows-workflow
  entrypoint: plan
  arguments:
    parameters:
      - name: rawEvent
        value: '{}'
      - name: eventBody
        value: '{}'
  templates:
    - name: plan
      inputs:
        parameters:
          - name: rawEvent
          - name: eventBody
      container:
        image: registry.ide-newton.ts.net/lab/codex-universal:latest
        imagePullPolicy: Always
        env:
          - name: DISCORD_BOT_TOKEN
            valueFrom:
              secretKeyRef:
                name: discord-codex-bot
                key: bot-token
                optional: true
          - name: DISCORD_GUILD_ID
            valueFrom:
              secretKeyRef:
                name: discord-codex-bot
                key: guild-id
                optional: true
          - name: DISCORD_CATEGORY_ID
            valueFrom:
              secretKeyRef:
                name: discord-codex-bot
                key: category-id
                optional: true
          - name: GH_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-token
                key: token
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-token
                key: token
          - name: LGTM_LOKI_ENDPOINT
            value: http://lgtm-loki-gateway.lgtm.svc.cluster.local/loki/api/v1/push
        command: ["/usr/local/bin/codex-bootstrap"]
        args:
          - "/bin/bash"
          - "-lc"
          - |
            set -euo pipefail

            EVENT_FILE=$(mktemp)
            cat <<'JSON' > "$EVENT_FILE"
            {{inputs.parameters.eventBody}}
            JSON

            STAGE=$(jq -r '.stage // ""' "$EVENT_FILE")
            if [[ "$STAGE" != "planning" ]]; then
              echo "Skipping unsupported stage: '$STAGE'"
              exit 0
            fi

            PROMPT_FILE=$(mktemp)
            jq -r '.prompt // empty' "$EVENT_FILE" > "$PROMPT_FILE"
            if [[ ! -s "$PROMPT_FILE" ]]; then
              echo "Missing Codex prompt in event payload" >&2
              exit 1
            fi

            export CODEX_PROMPT="$(cat "$PROMPT_FILE")"
            export ISSUE_REPO="$(jq -r '.repository // empty' "$EVENT_FILE")"
            export ISSUE_NUMBER="$(jq -r '.issueNumber // empty' "$EVENT_FILE")"
            export OUTPUT_PATH="${PLAN_OUTPUT_PATH:-/workspace/lab/.codex-plan-output.md}"
            export POST_TO_GITHUB=true
            export CODEX_STAGE=planning

            ISSUE_TITLE=$(jq -r '.issueTitle // empty' "$EVENT_FILE")
            if [[ "$ISSUE_TITLE" == "null" ]]; then
              ISSUE_TITLE=""
            fi
            export ISSUE_TITLE

            if [[ -z "$ISSUE_REPO" || -z "$ISSUE_NUMBER" || "$ISSUE_NUMBER" == "null" ]]; then
              echo "Missing repository or issue number in event payload" >&2
              exit 1
            fi

            echo "Generating plan for $ISSUE_REPO#$ISSUE_NUMBER"
            codex-plan

            echo "Codex plan output:" >&2
            cat "$OUTPUT_PATH" >&2
        resources:
          requests:
            cpu: "4"
            memory: 8Gi
          limits:
            cpu: "6"
            memory: 12Gi
      retryStrategy:
        limit: 3
        retryPolicy: OnFailure
