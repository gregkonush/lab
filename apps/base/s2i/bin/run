#!/bin/bash -e
#
# S2I run script for the 'alpine' image.
# The run script executes the server that runs your application.
#
# For more information see the documentation:
#	https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#

# Define potential entry points as a space-separated string
entry_points_str="server.ts index.ts app.ts main.ts worker.ts src/server.ts src/index.ts src/app.ts src/main.ts src/worker.ts server.js index.js app.js main.js src/server.js src/index.js src/app.js src/main.js src/worker.js"

# Loop through potential entry points
for entry_point in $entry_points_str; do
  if [ -f "$entry_point" ]; then
    # Use case for pattern matching as [[ ]] is also bash-specific
    case "$entry_point" in
      *.ts)
        echo "---> Found TypeScript entry point: $entry_point, executing with tsx..."
        exec tsx "$entry_point" "$@"
        ;;
      *.js)
        echo "---> Found JavaScript entry point: $entry_point, executing with node..."
        exec node "$entry_point" "$@"
        ;;
    esac
  fi
done

# If no direct entry point found, try pnpm start if package.json and start script exist
if [ -f "package.json" ] && grep -q '"start"' package.json; then
  echo "---> No direct entry point found, attempting to run 'pnpm start'..."
  exec pnpm start "$@"
fi

# If no entry point or pnpm start was found after checking all possibilities
# For the error message, we can just show the string
echo "Error: Unable to find a suitable entry point (checked: $entry_points_str) or a 'start' script in package.json."
echo "Please ensure your application has a recognized entry file or a 'start' script in package.json, or update the S2I run script."
exit 1
