# syntax=docker/dockerfile:1.6
FROM ghcr.io/openai/codex-universal:latest

ARG ARGO_VERSION=v3.6.3
ARG KUBECONFORM_VERSION=v0.6.7
ARG TARGETARCH=arm64
ARG CODEX_AUTH_CHECKSUM=unspecified

ENV DEBIAN_FRONTEND=noninteractive \
    WORKSPACE=/workspace \
    WORKTREE=/workspace/lab \
    PLAN_OUTPUT_PATH=/workspace/lab/.codex-plan-output.md \
    IMPLEMENTATION_OUTPUT_PATH=/workspace/lab/.codex-implementation.log \
    PLANNING_SUMMARY_PATH=/workspace/lab/.codex-planning-summary.md \
    IMPLEMENTATION_SUMMARY_PATH=/workspace/lab/.codex-implementation-summary.md \
    CODEX_IMPLEMENTATION_MAX_ATTEMPTS=2 \
    CODEX_SUMMARY_MAX_LINES=400 \
    CODEX_SUMMARY_MAX_CHARS=16000 \
    GIT_TERMINAL_PROMPT=0 \
    BUN_INSTALL=/usr/local

RUN apt-get update \
    && apt-get install -y --no-install-recommends git gh jq python3 curl \
    && rm -rf /var/lib/apt/lists/*

RUN set -eux; \
    ARCH=${TARGETARCH:-arm64}; \
    case "${ARCH}" in \
      amd64|arm64) \
        ;; \
      *) \
        echo "Unsupported TARGETARCH: ${ARCH}" >&2; \
        exit 1; \
        ;; \
    esac; \
    ARGO_ARCHIVE="/tmp/argo-linux-${ARCH}.gz"; \
    KUBECONFORM_ARCHIVE="/tmp/kubeconform-linux-${ARCH}.tar.gz"; \
    curl -fsSL -o "${ARGO_ARCHIVE}" "https://github.com/argoproj/argo-workflows/releases/download/${ARGO_VERSION}/argo-linux-${ARCH}.gz"; \
    gunzip -c "${ARGO_ARCHIVE}" > /tmp/argo; \
    install -m 0755 /tmp/argo /usr/local/bin/argo; \
    rm -f "${ARGO_ARCHIVE}" /tmp/argo; \
    curl -fsSL -o "${KUBECONFORM_ARCHIVE}" "https://github.com/yannh/kubeconform/releases/download/${KUBECONFORM_VERSION}/kubeconform-linux-${ARCH}.tar.gz"; \
    tar -xzf "${KUBECONFORM_ARCHIVE}" -C /tmp kubeconform; \
    install -m 0755 /tmp/kubeconform /usr/local/bin/kubeconform; \
    rm -f "${KUBECONFORM_ARCHIVE}" /tmp/kubeconform

RUN curl -fsSL https://bun.sh/install | bash \
    && mkdir -p /opt/homebrew/bin \
    && ln -s /usr/local/bin/bun /opt/homebrew/bin/bun

RUN bash -lc 'source /root/.nvm/nvm.sh && npm install -g @openai/codex@latest && ln -sf "$(command -v codex)" /usr/local/bin/codex'

RUN mkdir -p "$WORKSPACE" /root/.codex

# Copy Codex auth secret during build (requires BuildKit secret)
RUN --mount=type=secret,id=codex_auth,target=/tmp/codex_auth.json \
    cp /tmp/codex_auth.json /root/.codex/auth.json \
    && printf '%s\n' "${CODEX_AUTH_CHECKSUM}" > /root/.codex/auth.checksum

COPY apps/froussard/scripts/codex-config-container.toml /root/.codex/config.toml

# Authenticate gh using provided token and wire git credential helper
RUN --mount=type=secret,id=github_token,target=/tmp/gh_token \
    gh auth login --with-token < /tmp/gh_token \
    && gh auth setup-git

RUN git config --global user.name "codex-automation" \
    && git config --global user.email "codex-automation@users.noreply.github.com"

COPY apps/froussard/scripts/codex-bootstrap.sh /usr/local/bin/codex-bootstrap.sh
COPY apps/froussard/scripts/codex-plan.sh /usr/local/bin/codex-plan.sh
COPY apps/froussard/scripts/codex-implement.sh /usr/local/bin/codex-implement.sh
COPY apps/froussard/scripts/codex-post-run.sh /usr/local/bin/codex-post-run.sh
RUN chmod +x /usr/local/bin/codex-bootstrap.sh /usr/local/bin/codex-plan.sh /usr/local/bin/codex-implement.sh /usr/local/bin/codex-post-run.sh

WORKDIR /workspace
ENTRYPOINT ["/usr/local/bin/codex-bootstrap.sh"]
CMD ["bash"]
