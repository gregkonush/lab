// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=ts"
// @generated from file facteur/v1/contract.proto (package facteur.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message facteur.v1.CommandEvent
 */
export class CommandEvent extends Message<CommandEvent> {
  /**
   * @generated from field: string provider = 1;
   */
  provider = "";

  /**
   * @generated from field: string interaction_id = 2;
   */
  interactionId = "";

  /**
   * @generated from field: string application_id = 3;
   */
  applicationId = "";

  /**
   * @generated from field: string command = 4;
   */
  command = "";

  /**
   * @generated from field: string command_id = 5;
   */
  commandId = "";

  /**
   * @generated from field: uint32 version = 6;
   */
  version = 0;

  /**
   * @generated from field: string token = 7;
   */
  token = "";

  /**
   * @generated from field: map<string, string> options = 8;
   */
  options: { [key: string]: string } = {};

  /**
   * @generated from field: string guild_id = 9;
   */
  guildId = "";

  /**
   * @generated from field: string channel_id = 10;
   */
  channelId = "";

  /**
   * @generated from field: facteur.v1.DiscordUser user = 11;
   */
  user?: DiscordUser;

  /**
   * @generated from field: facteur.v1.DiscordMember member = 12;
   */
  member?: DiscordMember;

  /**
   * @generated from field: string locale = 13;
   */
  locale = "";

  /**
   * @generated from field: string guild_locale = 14;
   */
  guildLocale = "";

  /**
   * @generated from field: facteur.v1.Response response = 15;
   */
  response?: Response;

  /**
   * @generated from field: string timestamp = 16;
   */
  timestamp = "";

  /**
   * @generated from field: string correlation_id = 17;
   */
  correlationId = "";

  /**
   * @generated from field: string trace_id = 18;
   */
  traceId = "";

  constructor(data?: PartialMessage<CommandEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "facteur.v1.CommandEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "interaction_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "command_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "options", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 9, name: "guild_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "user", kind: "message", T: DiscordUser },
    { no: 12, name: "member", kind: "message", T: DiscordMember },
    { no: 13, name: "locale", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "guild_locale", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "response", kind: "message", T: Response },
    { no: 16, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "correlation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "trace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandEvent {
    return new CommandEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandEvent {
    return new CommandEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandEvent {
    return new CommandEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CommandEvent | PlainMessage<CommandEvent> | undefined, b: CommandEvent | PlainMessage<CommandEvent> | undefined): boolean {
    return proto3.util.equals(CommandEvent, a, b);
  }
}

/**
 * @generated from message facteur.v1.DiscordUser
 */
export class DiscordUser extends Message<DiscordUser> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: string global_name = 3;
   */
  globalName = "";

  /**
   * @generated from field: string discriminator = 4;
   */
  discriminator = "";

  constructor(data?: PartialMessage<DiscordUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "facteur.v1.DiscordUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "global_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "discriminator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscordUser {
    return new DiscordUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscordUser {
    return new DiscordUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscordUser {
    return new DiscordUser().fromJsonString(jsonString, options);
  }

  static equals(a: DiscordUser | PlainMessage<DiscordUser> | undefined, b: DiscordUser | PlainMessage<DiscordUser> | undefined): boolean {
    return proto3.util.equals(DiscordUser, a, b);
  }
}

/**
 * @generated from message facteur.v1.DiscordMember
 */
export class DiscordMember extends Message<DiscordMember> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated string roles = 2;
   */
  roles: string[] = [];

  constructor(data?: PartialMessage<DiscordMember>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "facteur.v1.DiscordMember";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscordMember {
    return new DiscordMember().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscordMember {
    return new DiscordMember().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscordMember {
    return new DiscordMember().fromJsonString(jsonString, options);
  }

  static equals(a: DiscordMember | PlainMessage<DiscordMember> | undefined, b: DiscordMember | PlainMessage<DiscordMember> | undefined): boolean {
    return proto3.util.equals(DiscordMember, a, b);
  }
}

/**
 * @generated from message facteur.v1.Response
 */
export class Response extends Message<Response> {
  /**
   * @generated from field: uint32 type = 1;
   */
  type = 0;

  /**
   * @generated from field: optional uint32 flags = 2;
   */
  flags?: number;

  constructor(data?: PartialMessage<Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "facteur.v1.Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "flags", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Response {
    return new Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJsonString(jsonString, options);
  }

  static equals(a: Response | PlainMessage<Response> | undefined, b: Response | PlainMessage<Response> | undefined): boolean {
    return proto3.util.equals(Response, a, b);
  }
}

/**
 * @generated from message facteur.v1.DispatchResult
 */
export class DispatchResult extends Message<DispatchResult> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: string workflow_name = 2;
   */
  workflowName = "";

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * @generated from field: string correlation_id = 4;
   */
  correlationId = "";

  /**
   * @generated from field: string trace_id = 5;
   */
  traceId = "";

  constructor(data?: PartialMessage<DispatchResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "facteur.v1.DispatchResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workflow_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "correlation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "trace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DispatchResult {
    return new DispatchResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DispatchResult {
    return new DispatchResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DispatchResult {
    return new DispatchResult().fromJsonString(jsonString, options);
  }

  static equals(a: DispatchResult | PlainMessage<DispatchResult> | undefined, b: DispatchResult | PlainMessage<DispatchResult> | undefined): boolean {
    return proto3.util.equals(DispatchResult, a, b);
  }
}

