// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v3.21.12
// source: facteur/v1/contract.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export interface CommandEvent {
  provider: string;
  interactionId: string;
  applicationId: string;
  command: string;
  commandId: string;
  version: number;
  token: string;
  options: { [key: string]: string };
  guildId: string;
  channelId: string;
  user?: DiscordUser | undefined;
  member?: DiscordMember | undefined;
  locale: string;
  guildLocale: string;
  response?: Response | undefined;
  timestamp: string;
  correlationId: string;
  traceId: string;
}

export interface CommandEvent_OptionsEntry {
  key: string;
  value: string;
}

export interface DiscordUser {
  id: string;
  username: string;
  globalName: string;
  discriminator: string;
}

export interface DiscordMember {
  id: string;
  roles: string[];
}

export interface Response {
  type: number;
  flags?: number | undefined;
}

export interface DispatchResult {
  namespace: string;
  workflowName: string;
  message: string;
  correlationId: string;
  traceId: string;
}

function createBaseCommandEvent(): CommandEvent {
  return {
    provider: "",
    interactionId: "",
    applicationId: "",
    command: "",
    commandId: "",
    version: 0,
    token: "",
    options: {},
    guildId: "",
    channelId: "",
    user: undefined,
    member: undefined,
    locale: "",
    guildLocale: "",
    response: undefined,
    timestamp: "",
    correlationId: "",
    traceId: "",
  };
}

export const CommandEvent = {
  encode(message: CommandEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.provider !== "") {
      writer.uint32(10).string(message.provider);
    }
    if (message.interactionId !== "") {
      writer.uint32(18).string(message.interactionId);
    }
    if (message.applicationId !== "") {
      writer.uint32(26).string(message.applicationId);
    }
    if (message.command !== "") {
      writer.uint32(34).string(message.command);
    }
    if (message.commandId !== "") {
      writer.uint32(42).string(message.commandId);
    }
    if (message.version !== 0) {
      writer.uint32(48).uint32(message.version);
    }
    if (message.token !== "") {
      writer.uint32(58).string(message.token);
    }
    Object.entries(message.options).forEach(([key, value]) => {
      CommandEvent_OptionsEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).ldelim();
    });
    if (message.guildId !== "") {
      writer.uint32(74).string(message.guildId);
    }
    if (message.channelId !== "") {
      writer.uint32(82).string(message.channelId);
    }
    if (message.user !== undefined) {
      DiscordUser.encode(message.user, writer.uint32(90).fork()).ldelim();
    }
    if (message.member !== undefined) {
      DiscordMember.encode(message.member, writer.uint32(98).fork()).ldelim();
    }
    if (message.locale !== "") {
      writer.uint32(106).string(message.locale);
    }
    if (message.guildLocale !== "") {
      writer.uint32(114).string(message.guildLocale);
    }
    if (message.response !== undefined) {
      Response.encode(message.response, writer.uint32(122).fork()).ldelim();
    }
    if (message.timestamp !== "") {
      writer.uint32(130).string(message.timestamp);
    }
    if (message.correlationId !== "") {
      writer.uint32(138).string(message.correlationId);
    }
    if (message.traceId !== "") {
      writer.uint32(146).string(message.traceId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CommandEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.provider = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.interactionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.applicationId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.command = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.commandId = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.version = reader.uint32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.token = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          const entry8 = CommandEvent_OptionsEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.options[entry8.key] = entry8.value;
          }
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.guildId = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.channelId = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.user = DiscordUser.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.member = DiscordMember.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.locale = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.guildLocale = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.response = Response.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.correlationId = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.traceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<CommandEvent>, I>>(base?: I): CommandEvent {
    return CommandEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandEvent>, I>>(object: I): CommandEvent {
    const message = createBaseCommandEvent();
    message.provider = object.provider ?? "";
    message.interactionId = object.interactionId ?? "";
    message.applicationId = object.applicationId ?? "";
    message.command = object.command ?? "";
    message.commandId = object.commandId ?? "";
    message.version = object.version ?? 0;
    message.token = object.token ?? "";
    message.options = Object.entries(object.options ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.guildId = object.guildId ?? "";
    message.channelId = object.channelId ?? "";
    message.user = (object.user !== undefined && object.user !== null)
      ? DiscordUser.fromPartial(object.user)
      : undefined;
    message.member = (object.member !== undefined && object.member !== null)
      ? DiscordMember.fromPartial(object.member)
      : undefined;
    message.locale = object.locale ?? "";
    message.guildLocale = object.guildLocale ?? "";
    message.response = (object.response !== undefined && object.response !== null)
      ? Response.fromPartial(object.response)
      : undefined;
    message.timestamp = object.timestamp ?? "";
    message.correlationId = object.correlationId ?? "";
    message.traceId = object.traceId ?? "";
    return message;
  },
};

function createBaseCommandEvent_OptionsEntry(): CommandEvent_OptionsEntry {
  return { key: "", value: "" };
}

export const CommandEvent_OptionsEntry = {
  encode(message: CommandEvent_OptionsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CommandEvent_OptionsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandEvent_OptionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<CommandEvent_OptionsEntry>, I>>(base?: I): CommandEvent_OptionsEntry {
    return CommandEvent_OptionsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandEvent_OptionsEntry>, I>>(object: I): CommandEvent_OptionsEntry {
    const message = createBaseCommandEvent_OptionsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseDiscordUser(): DiscordUser {
  return { id: "", username: "", globalName: "", discriminator: "" };
}

export const DiscordUser = {
  encode(message: DiscordUser, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.globalName !== "") {
      writer.uint32(26).string(message.globalName);
    }
    if (message.discriminator !== "") {
      writer.uint32(34).string(message.discriminator);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DiscordUser {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscordUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.globalName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.discriminator = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<DiscordUser>, I>>(base?: I): DiscordUser {
    return DiscordUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DiscordUser>, I>>(object: I): DiscordUser {
    const message = createBaseDiscordUser();
    message.id = object.id ?? "";
    message.username = object.username ?? "";
    message.globalName = object.globalName ?? "";
    message.discriminator = object.discriminator ?? "";
    return message;
  },
};

function createBaseDiscordMember(): DiscordMember {
  return { id: "", roles: [] };
}

export const DiscordMember = {
  encode(message: DiscordMember, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.roles) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DiscordMember {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscordMember();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<DiscordMember>, I>>(base?: I): DiscordMember {
    return DiscordMember.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DiscordMember>, I>>(object: I): DiscordMember {
    const message = createBaseDiscordMember();
    message.id = object.id ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseResponse(): Response {
  return { type: 0, flags: undefined };
}

export const Response = {
  encode(message: Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).uint32(message.type);
    }
    if (message.flags !== undefined) {
      writer.uint32(16).uint32(message.flags);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.flags = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.type = object.type ?? 0;
    message.flags = object.flags ?? undefined;
    return message;
  },
};

function createBaseDispatchResult(): DispatchResult {
  return { namespace: "", workflowName: "", message: "", correlationId: "", traceId: "" };
}

export const DispatchResult = {
  encode(message: DispatchResult, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.namespace !== "") {
      writer.uint32(10).string(message.namespace);
    }
    if (message.workflowName !== "") {
      writer.uint32(18).string(message.workflowName);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    if (message.correlationId !== "") {
      writer.uint32(34).string(message.correlationId);
    }
    if (message.traceId !== "") {
      writer.uint32(42).string(message.traceId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DispatchResult {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDispatchResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.namespace = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.workflowName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.correlationId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.traceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<DispatchResult>, I>>(base?: I): DispatchResult {
    return DispatchResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DispatchResult>, I>>(object: I): DispatchResult {
    const message = createBaseDispatchResult();
    message.namespace = object.namespace ?? "";
    message.workflowName = object.workflowName ?? "";
    message.message = object.message ?? "";
    message.correlationId = object.correlationId ?? "";
    message.traceId = object.traceId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };
