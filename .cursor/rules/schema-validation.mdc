---
description: schema validation for forms and ai output
globs: *.tsx
alwaysApply: false
---

# Schema Validation Guide

## Core Principles
- Use zod for all schema validation needs
- Enforce type safety through schema validation

## Validation Domains

### Form Validation
- Define form schemas in a dedicated `schemas` folder
- Use zod's `.parse()` or `.safeParse()` for validation
- Integrate with React Hook Form using `zodResolver`
- Example:
  ```tsx
  import { z } from 'zod'
  import { zodResolver } from '@hookform/resolvers/zod'
  import { useForm } from 'react-hook-form'

  const formSchema = z.object({
    email: z.string().email('Please enter a valid email'),
    password: z.string().min(8, 'Password must be at least 8 characters')
  })

  type FormValues = z.infer<typeof formSchema>

  // In component:
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: { email: '', password: '' }
  })
  ```

### API Validation
- Define request/response schemas in dedicated files
- Validate incoming requests before processing
- Validate outgoing responses before sending
- Use zod's transformations for data normalization
- Example:
  ```tsx
  import { z } from 'zod'

  export const userSchema = z.object({
    id: z.string().uuid(),
    name: z.string().min(1),
    email: z.string().email(),
    role: z.enum(['admin', 'user']).default('user')
  })

  export type User = z.infer<typeof userSchema>

  // In API route:
  const result = userSchema.safeParse(incomingData)
  if (!result.success) {
    return { error: result.error.format() }
  }
  // Process validated data
  const user = result.data
  ```

### AI Output Validation
- Define expected AI response schemas
- Validate and sanitize AI outputs
- Handle partial or invalid responses gracefully
- Use refinements for complex validations
- Example:
  ```tsx
  import { z } from 'zod'

  const aiResponseSchema = z.object({
    text: z.string(),
    confidence: z.number().min(0).max(1),
    entities: z.array(z.object({
      type: z.string(),
      value: z.string(),
      score: z.number().optional()
    })).default([])
  })

  // Validate AI response
  const validatedResponse = aiResponseSchema.parse(aiOutput)
  ```

## Best Practices
- Use type inference with `z.infer<typeof schema>`
- Leverage zod's composition for complex schemas
- Add meaningful error messages
- Use schema transformations for data normalization

